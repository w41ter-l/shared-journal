// Copyright 2022 The Engula Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package engula.journal.v1.shared.master;

// See src/master/mod.rs for details.
enum ObserverState {
    FOLLOWING = 0;
    SEALING = 1;
    RECOVERING = 2;
    LEADING = 3;
}

// See src/lib.rs for details.
enum SegmentState {
    APPENDING = 0;
    SEALED = 1;
}

// See src/journal.rs for details.
enum Role {
    FOLLOWER = 0;
    LEADER = 1;
}

// Commands is supplied by master and complete by stream observers.
enum CommandType {
    NOP = 0;
    PROMOTE = 1;
}

message Command {
    CommandType command_type = 1;

    uint32 epoch = 2;
    Role role = 3;
    string leader = 4;
    repeated uint32 pending_epochs = 5;
}

service Master {
    // Get stream meta.
    rpc GetStream(GetStreamRequest) returns (GetStreamResponse);

    // Get segment meta of the specified epoch of a stream.
    rpc GetSegment(GetSegmentRequest) returns (GetSegmentResponse);

    // Sent heartbeat to master and receives commands which must complete by
    // stream observers.
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);

    // Seal the corresponding segment.
    rpc SealSegment(SealSegmentRequest) returns (SealSegmentResponse);
}

message GetStreamRequest {
    string stream_name = 1;
}

message GetStreamResponse {
    uint64 stream_id = 1;
}

message GetSegmentRequest {
    string stream_name = 1;
    uint32 seg_epoch = 2;
}

message GetSegmentResponse {
    uint64 stream_id = 1;

    repeated string copy_set = 2;

    SegmentState state = 3;
}

message HeartbeatRequest {
    string stream_name = 1;
    uint32 epoch = 2;
    Role role = 3;

    string observer_id = 4;
    ObserverState observer_state = 5;
    uint64 acked_seq = 6;
}

message HeartbeatResponse {
    repeated Command commands = 1;
}

message SealSegmentRequest {
    uint64 stream_id = 1;
}

message SealSegmentResponse {}
